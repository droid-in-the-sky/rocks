native _rand, _sqrt;

code/await Rock_Big (
        var& SDL_Texture tex,
    ) => (
        var& Collideable col,
    ) =>void
do
    var SDL_Rect rect_ = val SDL_Rect(_,_, tex.height,tex.height);

    event void ok_collided;
    var Collideable col_ = val Collideable(&rect_, &ok_collided);
    col = &col_;

    var float vx = _rand()%(WIN_W/5) + 1;
    var float vy = _rand()%(WIN_H/5) + 1;
    do
        rect_.x = WIN_W/3 + _rand()%WIN_W/3;
        if (_rand()%2) as bool then
            vx = -vx;
        end
        if (_rand()%2) as bool then
            rect_.y = 0;
        else
            rect_.y = WIN_H;
            vy = -vy;
        end
    end

    var Movable mov = val Movable(Axis(rect_.x, vx, 0),
                                  Axis(rect_.y, vy, 0));

    watching Move(&rect_,&mov), ok_collided do
        var SDL_Rect clip = val SDL_Rect(0,0, tex.height,tex.height);
        par do
            var float v = _sqrt(mov.x.v*mov.x.v + mov.y.v*mov.y.v);
            var float p = 0;
            var int dt;
            every dt in SDL_DT do
                p = p + v*dt/1000;
                clip.x = ((p/rect_.w) as int)*rect_.w % (6*rect_.w);
            end
        with
            every SDL_REDRAW do
                var SDL_Rect r = val SDL_Rect(rect_.x-rect_.w/2,
                                              rect_.y-rect_.h/2,
                                              rect_.w, rect_.h);
                _SDL_RenderCopy(outer.ren, tex.ptr, (&&clip as _SDL_Rect&&),
                                                    (&&r as _SDL_Rect&&));
            end
        end
    end
end
