/*
 * Moves the requested object with constant speed until it goes out of screen.
 * This auxiliary class is used to move all objects (bonuses, bomb, fire, 
 * meteros), except the spaceships.
 */
class MoveObject with
    var   Object& obj;      // object to move
    var   float   vx = 0;   // requested speed in X
    var   float   vy = 0;   // requested speed in Y
    var   float   ax = 0;   // requested accel in X
    var   float   ay = 0;   // requested accel in Y
do
    // Convert the current position of the object to "float" to keep precision
    // in animations:
    var float sx = obj.rect.x;
    var float sy = obj.rect.y;

    /*
     * On every frame, apply the physics "linear motion" formula.
     * When any of the positions "sx" or "sy" go out of the screen, escape the 
     * loop and terminate this body.
     */
    loop do
        var int dt = await SDL_DT;
        vx = vx + ax*dt;
        sx = sx + this.vx*dt/1000;  // Sx = Sx + vx*dt
        obj.rect.x = sx;
        if obj.rect.x < 0
        or obj.rect.x > _REN_W then
            break;                  // went out of the screen
        end

        vy = vy + ay*dt;
        sy = sy + this.vy*dt/1000;  // Sy = Sy + vy*dt
        obj.rect.y = sy;
        if obj.rect.y < 0
        or obj.rect.y > _REN_H then
            break;                  // went out of the screen
        end
    end
end

/*
 * A spaceship fire shot.
 * Moves with the same "dir" and "vy" as the shooting ship.
 * The fire width depends on the number of the ship's "F" bonuses.
 * It moves until it leaves the screen ("MoveObject") or collides ("go_hit").
 */
class Fire with
    interface NObject;
    var int dir;        // fire orientation (left=1/right=-1)
    var int vy;         // inherit "vy" from the shooting ship
    var int w;          // fire width (may increase with "F" bonus)
    var bool can_hit = true; // can hit since the beginning
do
    // Set width & height.
    this.rect.w = _REN_W/50 + _REN_W*this.w/100;
    this.rect.h = 3;

    /*
     * Move the ship, redraw it, await being hit.
     */
    par/or do
        do MoveObject with
            this.obj = &outer;
            this.vx  = _REN_W/3 * dir;
            this.vy  = vy;
        end;
    with
        every SDL_REDRAW do
            _boxRGBA(_REN, rect.x,rect.y, rect.x+rect.w,rect.y+rect.h,
                           0xFF,0xFF,0x88,0xFF);
        end
    with
        await go_hit;       // terminates the "par/or" when gets hit
    end
end

/*
 * Maximum values for some ship properties:
 */
#define _SHIP_HITS_MAX      3   // maximum number of hit points for a ship
#define _SHIP_FIRES_MAX     5   // maximum number of shots a ship can fire
#define _SHIP_SHIELDS_MAX   3   // maximum number of shields a ship can hold

/*
 * The spaceship class.
 * One instance for each of the two players.
 * Each ship has a controller, orientation (left/right), image (left/right
 * oriented), and screen limits (they cannot cross the half of the screen).
 * A ship moves, shoots, and spawns a "shield" through its controller.
 * A ship remains alive until its number of hit points reaches zero.
 * Each collision decrements the hit points.
 * Before dying, the ship explodes with an animation.
 */
class Ship with
    interface Object;
    var _SDL_Texture& tex;          // left/right oriented image

    var int lim_x1, lim_x2,         // physical screen limits that the 
            lim_y1, lim_y2;         // ship can move

    var int dir;                    // ship orientation (left=1/right=-1)
    var Controller& controller;     // reference the ship controller

    event void go_F;                // inc. ship number of shots
    event void go_H;                // inc. ship number of hit points
    event void go_S;                // inc. ship number of shields
    
    event void ok_missile;          // emitted om ship's missile trigger
    event void ok_killed;           // emitted om ship's death (hits=0)

    pool Fire[_OBJ_FIRE_N] fires;   // holds all fire shoots

    var bool can_hit = true;        // can hit since the beginning
do
    /*
     * Take the ship image width (it has a squared dimension).
     * Sets w/h from it.
     */
    var int dim=0;    // dim = w
        _SDL_QueryTexture(_TEX_SHIP1, null, null, &&dim, null);
    this.rect.w = dim;
    this.rect.h = dim;

    /*
     * The image has 6 frames through its Y-axis.
     * Initialize the clipping rectangle from the frame (0,dim).
     */
    var SDL_Rect clip_r = SDL_Rect(0,0, dim,dim);

    /*
     * Temporary ship states:
     * - blink      : if the ship lost a hit point.
     *                  It blinks and becomes immortal for 2s.
     * - hasShield  : if the ship activated a shield.
     *                  It spawns a blue circle and becomes immortal.
     */
    var bool blink     = false;
    var bool hasShield = false;

    /*
     * The "vy" ship speed is inherited by all fire shots.
     */
    var float vy = 0;

    /*
     * Await and react to multiple events in parallel:
     * - hit points
     * - shields
     * - fire shots
     * - moving/redrawing the ship
     * The only way to terminate the "par/or" is when the ship reaches zero hit 
     * points.
     */

    par/or do
        /*
         * HIT POINTS: start with the maximum number of hit points.
         * - Increment with bonus "H"   (event "go_H").
         * - Decrement with a collision (event "go_hit").
         * - Terminate when n_hits=0.
         * - Draw a hit-points bar on every frame.
         */
        var int n_hits = _SHIP_HITS_MAX;

        par/or do
            // Increment "n_hits" on every "H" bonus:
            every this.go_H do
                n_hits = n_hits + 1;
                if n_hits > _SHIP_HITS_MAX then
                    n_hits = _SHIP_HITS_MAX;    // don't go over MAX
                end
            end
        with
            /*
             * Decrement "n_hits" on every "go_hit" (collision).
             * Ignore if "isImmortal" or "hasShield".
             * Blink during 2s.
             * Terminate when "n_hits=0".
             */
            loop do
                await this.go_hit until not (this.controller.isImmortal or
                                             hasShield);
                n_hits = n_hits - 1;

                if n_hits <= 0 then
                    break;  // escapes the "loop" and consequently the "par/or"
                end

                // Play the "hit" sound effect:
                _Mix_PlayChannel(-1, _SND_HIT_DEC, 0);

                watching 2s do
                    every 100ms do
                        blink = not blink;    // blink every 100ms
                    end
                end
                blink = false;
                    /*
                     * While blinking, the body is not awaiting "go_hit", 
                     * hence, the ship is immortal during this period.
                     */
            end
        with
            /*
             * Show a hit points bar in the top left/right of the screen:
             * - x: left/right (depends on "this.dir")
             * - y: top
             * - w: thin
             * - h: depends on "n_hits"
             */
            var int x;
            if this.dir > 0 then
                x = this.lim_x1 + _REN_W/100;    // left side
            else
                x = this.lim_x2 - _REN_W/100;    // right side
            end
            var SDL_Rect hits_r =
                SDL_Rect(x,
                         this.lim_y1 + _REN_H/100,  // top of screen
                         _REN_W/100,                // very thin
                         0);                        // set below

            every SDL_REDRAW do
                hits_r.h = n_hits * _REN_H/20;
                _boxRGBA(_REN, hits_r.x, hits_r.y,
                               hits_r.x+hits_r.w, hits_r.y+hits_r.h,
                               0x00,0xFF,0x00,0x77);
                hits_r.h = _SHIP_HITS_MAX * _REN_H/20;
                _rectangleRGBA(_REN, hits_r.x, hits_r.y,
                                     hits_r.x+hits_r.w, hits_r.y+hits_r.h,
                                     0x77,0x77,0x77,0xFF);
            end
        end
    with
        /*
         * SHIELDS: start with 0.
         * - Increment with bonus "S" (event "go_S").
         * - Spawn/decrement with controller (event "ok_shield").
         * - Draw a number-of-shields bar on every frame.
         */
        var int& p_shields;
#ifdef CEU_TIMEMACHINE
        if id == _OBJ_SHIP1 then
            p_shields = &_TIME1;
        else
            p_shields = &_TIME2;
        end
#else
        var int n_shields = 0;
        p_shields = &n_shields;
#endif

        var int x;
        if this.dir > 0 then
            x = this.lim_x1 + 3*_REN_W/100;         // left side
        else
            x = this.lim_x2 - 3*_REN_W/100;         // right side
        end
        var SDL_Rect shields_r =
                SDL_Rect(x,
                         this.lim_y1 + _REN_H/100,  // top of screen
                         _REN_W/100,                // very thin
                         0);

        par do
            // Increment "n_shields" on every "S" bonus:
            every this.go_S do
                if p_shields < _SHIP_SHIELDS_MAX then
#ifdef CEU_TIMEMACHINE
if not _CEU_TIMEMACHINE_ON then
                    p_shields = p_shields + 1;
end
#endif
                end
            end
        with
            /*
             * Spawn a shield on every controller "ok_shield" request.
             * Ignore if "n_shields=0".
             * Animate a "blue" explosion that increases the ship size and hits 
             * everything around. The ship is immortal during that period.
             */
            loop do
                await this.controller.ok_shield
                until (p_shields > 0);

                p_shields = p_shields - 1;    // decrement "n_shields"
                hasShield = true;              // set hasShield
                finalize with
                    this.rect.w = dim;          // on termination
                    this.rect.h = dim;          //   restore w/h
                    hasShield = false;          //   unset hasShield
                end

                // Play the explosion sound effect:
                _Mix_PlayChannel(-1, _SND_EXPLOSION, 0);
                
                /*
                 * Explosion animation:
                 * During 100ms, increase the ship w/h with speed 40w/s.
                 * Draw a blue circle with that radius meanwhile.
                 */
                watching 100ms do
                    par do
                        var float d = this.rect.w;
                        var float v = 40 * this.rect.w;
                        every dt in SDL_DT do
                            d = d + v*dt/1000;
                            this.rect.w = (int)d;
                            this.rect.h = (int)d;
                        end
                    with
                        every SDL_REDRAW do
                            _filledCircleRGBA(_REN,
                                this.rect.x,this.rect.y,this.rect.w,
                                0x00,0x00,0xFF,0xDD);
                        end
                    end
                end
                    /*
                     * Only after the animation terminates that the body loops, 
                     * restores the initial values and the controller can spawn 
                     * a new shield.
                     */
            end
        with
            loop do
                await this.controller.ok_missile
                until (p_shields > 0);
                p_shields = p_shields - 1;      // decrement "n_shields"
                emit this.ok_missile;
            end
        with
            /*
             * Show a number-of-shields bar in the top left/right of the 
             * screen:
             * - x: left/right (depends on "this.dir")
             * - y: top
             * - w: thin
             * - h: depends on "n_shields"
             */
            every SDL_REDRAW do
                shields_r.h = p_shields * _REN_H/33;
                _boxRGBA(_REN, shields_r.x, shields_r.y,
                                shields_r.x+shields_r.w,
                                shields_r.y+shields_r.h,
                                0x00,0x00,0xFF,0xDD);
                shields_r.h = _SHIP_SHIELDS_MAX * _REN_H/33;
                _rectangleRGBA(_REN, shields_r.x, shields_r.y,
                                     shields_r.x+shields_r.w, 
                                     shields_r.y+shields_r.h,
                                     0x77,0x77,0x77,0xFF);
            end
        end
    with
        /*
         * FIRES: start with the maximum number of fire shots (ammo).
         * - Increment every 2s.
         * - Spawn/decrement with controller (event "ok_fire").
         * - Increase fire width on every bonus "F" (event "go_F").
         */
        var int n_fires = _SHIP_FIRES_MAX;
        var SDL_Rect fires_r = SDL_Rect(0,
                                this.lim_y1 + _REN_H/100, // top of screen
                                _REN_W/100,               // very thin
                                0);
        if this.dir > 0 then
            fires_r.x = this.lim_x1 + 2*_REN_W/100; // left side
        else
            fires_r.x = this.lim_x2 - 2*_REN_W/100; // right side
        end

         // Fire width offset (bonus).
        var int fire_w = 0;

        par do
            // Increment "n_fires" every 2s:
            every 2s do
                if n_fires < _SHIP_FIRES_MAX then
                    n_fires = n_fires + 1;
                end
            end
        with
            // Increment fire width on every "F" bonus:
            every this.go_F do
                fire_w = fire_w + 1;
            end
        with
            // Spawn a fire shot on every "ok_fired" request:

            every this.controller.ok_fired do
                if n_fires == 0 then
                    continue;               // ignore if no ammo
                end

                // Spawn the shot (limited to _OBJ_FIRE_N instances):
                var Fire&&? fire = spawn Fire in fires with
                    this.id   = id + 2;     // SHIP1, SHIP2, FIRE1, FIRE2
                    this.dir  = dir;        // same orientation
                    this.vy   = vy;         // same speed
                    this.rect = rect;       // same position
                    this.w    = fire_w;     // current ship's fire width offset
                end;
                if fire? then
                    // Play shoot sound effect if spawn was successful:
                    _Mix_PlayChannel(-1, _SND_FIRE, 0);
                    n_fires = n_fires - 1;
                end
            end
        with
            /*
             * Show a ammo bar in the top left/right of the screen:
             * - x: left/right (depends on "this.dir")
             * - y: top
             * - w: thin
             * - h: depends on "n_fires"
             */
            every SDL_REDRAW do
                // draw fires
                fires_r.h = n_fires * _REN_H/33;
                _boxRGBA(_REN, fires_r.x, fires_r.y,
                               fires_r.x+fires_r.w, fires_r.y+fires_r.h,
                               0xFF,0x00,0x00,0x77);
                fires_r.h = _SHIP_FIRES_MAX * _REN_H/33;
                _rectangleRGBA(_REN, fires_r.x, fires_r.y,
                                     fires_r.x+fires_r.w, fires_r.y+fires_r.h,
                                     0x77,0x77,0x77,0xFF);
            end
        end
    with
        /*
         * Set the ship initial position and speed.
         * ("vy" is used by fire shots and is set on top level)
         * Uses "float" for precision in the moving animations.
         */
        var float sx = this.rect.x;
        var float vx = 0;
        var float sy = this.rect.y;

        every dt in SDL_DT do
            // Speeds are limited to a maximum:
            vx = vx + this.controller.ax*dt;
            vy = vy + this.controller.ay*dt;
            if vx> _REN_W/10 then vx= _REN_W/10; end
            if vx<-_REN_W/10 then vx=-_REN_W/10; end
            if vy> _REN_H/10 then vy= _REN_H/10; end
            if vy<-_REN_H/10 then vy=-_REN_H/10; end

            // Positions are limited to the screen limits:
            sx = sx + vx*dt/1000;
            sy = sy + vy*dt/1000;
            if sx < this.lim_x1 then
                sx = this.lim_x1;
                vx = 0;
            else/if sx > this.lim_x2 then
                sx = this.lim_x2;
                vx = 0;
            end
            if sy < this.lim_y1 then
                sy = this.lim_y1;
                vy = 0;
            else/if sy > this.lim_y2 then
                sy = this.lim_y2;
                vy = 0;
            end

            this.rect.x = sx;
            this.rect.y = sy;
        end
    with
        every SDL_REDRAW do
            if blink then
                continue;
            end

            // choose ship frame
            if this.controller.ay > 0 then
                clip_r.y = dim*3;
            else/if this.controller.ay < 0 then
                clip_r.y = dim*2;
            else/if this.controller.ax * this.dir < 0 then
                clip_r.y = 0;
            else
                clip_r.y = dim*1;
            end
            // redraw sprite
            var SDL_Rect r = SDL_Rect(this.rect.x-dim/2, this.rect.y-dim/2,
                                      dim,dim);
            _SDL_RenderCopy(_REN, &&this.tex, (_SDL_Rect&&)&&clip_r, (_SDL_Rect&&)&&r);
        end
    end

    // explode 40w/s
    _Mix_PlayChannel(-1, _SND_EXPLOSION, 0);
    watching 100ms do
        par do
            var float d = dim;
            var float v = 40 * dim;
            every dt in SDL_DT do
                d = d + v*dt/1000;
                this.rect.w = (int)d;
                this.rect.h = (int)d;
            end
        with
            every SDL_REDRAW do
                _filledCircleRGBA(_REN, this.rect.x,this.rect.y,this.rect.w,
                                        0xFF,0x00,0x00,0xFF);
            end
        end
    end

    emit ok_killed;
end

class RockBig with
    interface NObject;
    var int id = _OBJ_ROCK;
    var bool can_hit = false;  // can hit only after a while
do
    var int dim=0;    // dim = h
        _SDL_QueryTexture(_TEX_ROCK, null, null, null, &&dim);
    this.rect.w = dim;
    this.rect.h = dim;

    var SDL_Rect clip_r = SDL_Rect(0,0, this.rect.w,this.rect.h);

    var float vx = _rand()%(_REN_W/5) + 1;
    var float vy = _rand()%(_REN_H/5) + 1;

    this.rect.x = _REN_W/3 + _rand()%_REN_W/3;
    if _rand() % 2 then
        vx = -vx;
    end
    if _rand() % 2 then
        this.rect.y = 0;
    else
        this.rect.y = _REN_H;
        vy = -vy;
    end

    par/or do
        await (_rand() % 5000)ms;   // ignore hits/moving as it appears
        this.can_hit = true;        // now ready for collisions
        par/or do
            do MoveObject with
                this.obj = &outer;
                this.vx  = vx;
                this.vy  = vy;
            end;
        with
            await go_hit;
        end
    with
        var float v = _sqrt(vx*vx + vy*vy);
        var float x = 0;
        every dt in SDL_DT do
            x = x + v*dt/1000;
            clip_r.x = (int)(x/this.rect.w)*this.rect.w % (6*this.rect.w);
        end
    with
        every SDL_REDRAW do
            var SDL_Rect r = SDL_Rect(this.rect.x-this.rect.w/2,
                                      this.rect.y-this.rect.h/2,
                                      this.rect.w,
                                      this.rect.h);
            _SDL_RenderCopy(_REN, _TEX_ROCK, (_SDL_Rect&&)&&clip_r, (_SDL_Rect&&)&&r);
        end
    end
end

class RockSmall with
    interface NObject;
    var int id = _OBJ_rock;
    var int dir = 0;
    var bool can_hit = true; // can hit since the beginning
do
    _assert(this.dir != 0);

    var int dim=0;    // dim = h
        _SDL_QueryTexture(_TEX_rock, null, null, null, &&dim);
    this.rect.w = dim;
    this.rect.h = dim;

    var SDL_Rect clip_r = SDL_Rect(0,0, this.rect.w,this.rect.h);

    var float vx = (_rand()%(_REN_W/10) + 1) * this.dir;
    var float vy = (_rand()%(_REN_H/10) + 1);
    if _rand() % 2 then
        vy = -vy;
    end

    par/or do
        do MoveObject with
            this.obj = &outer;
            this.vx  = vx;
            this.vy  = vy;
        end;
    with
        var float v = _sqrt(vx*vx + vy*vy);
        var float x = 0;
        every dt in SDL_DT do
            x = x + v*dt/1000;
            clip_r.x = (int)(x/this.rect.w)*this.rect.w % (6*this.rect.w);
        end
    with
        every SDL_REDRAW do
            var SDL_Rect r = SDL_Rect(this.rect.x - this.rect.w/2,
                                      this.rect.y - this.rect.h/2,
                                      this.rect.w,
                                      this.rect.h);
            _SDL_RenderCopy(_REN, _TEX_rock, (_SDL_Rect&&)&&clip_r, (_SDL_Rect&&)&&r);
        end
    with
        await go_hit;
    end
end

class Bonus with
    interface NObject;
    var int id  = 0;
    var int dir = 0;
    var _SDL_Texture& tex;
    var bool can_hit = true; // can hit since the beginning
do
    _assert(this.id  != 0);
    _assert(this.dir != 0);

    this.rect.w = _REN_W/30;
    this.rect.h = _REN_W/30;

    var float vx = (_rand()%(_REN_W/10) + 1) * this.dir;
    var float vy = (_rand()%(_REN_H/10) + 1);
    if _rand() % 2 then
        vy = -vy;
    end

    par/or do
        do MoveObject with
            this.obj = &outer;
            this.vx  = vx;
            this.vy  = vy;
        end;
    with
        every SDL_REDRAW do
            _filledCircleRGBA(_REN, this.rect.x,this.rect.y,this.rect.w/2,
                                    0x00,0x77,0x00,0xFF);

            var int w=0, h=0;
            _SDL_QueryTexture(&&this.tex, null, null, &&w, &&h);
            var SDL_Rect r = SDL_Rect(this.rect.x - w/2,
                                      this.rect.y - h/2,
                                      w,h);
            _SDL_RenderCopy(_REN, &&this.tex, null, (_SDL_Rect&&)&&r);
        end
    with
        await go_hit;
    end
end

#if 0
// not used anymore
class Missile with
    interface NObject;
    var int id = 0;
    var Object&& obj_to_follow = null;
do
    _assert(this.id != 0);
    _assert(this.obj_to_follow != null);

    this.rect.w = _REN_W/60;
    this.rect.h = _REN_W/60;

    par/or do
        var float vx = _REN_W/6 + _rand()%(_REN_W/20);
        if this.rect.x > obj_to_follow:rect.x then
            vx = -vx;
        end
        var float vy = 0;

        var MoveObject move with
            this.obj = &outer;
            this.vx  = vx;
            this.vy  = vy;
        end;
        par/or do
            watching this.obj_to_follow do
                every SDL_DT do
                    if this.rect.y > obj_to_follow:rect.y then
                        move.ay = -(float)_REN_W/10000;
                    else
                        move.ay =  (float)_REN_W/10000;
                    end
                    if move.vy > _REN_H/10 then
                        move.vy = _REN_H/10;
                    else/if move.vy < -_REN_H/10 then
                        move.vy = -_REN_H/10;
                    end
                end
            end
            await FOREVER;
        with
            await move.ok;
        end
    with
        every SDL_REDRAW do
            _filledCircleRGBA(_REN, this.rect.x,this.rect.y,this.rect.w/2,
                                    0x77,0x77,0x00,0xFF);
        end
    with
        await go_hit;
    end
end
#endif

class Bomb with
    interface NObject;
    var int id = _OBJ_BOMB;
    var int dir = 0;
    var bool can_hit = true; // can hit since the beginning
do
    _assert(this.dir != 0);

    this.rect.w = _REN_W/30;
    this.rect.h = _REN_W/30;

    var float vx = (_rand()%(_REN_W/10) + 1) * this.dir;
    var float vy = (_rand()%(_REN_H/10) + 1);
    if _rand() % 2 then
        vy = -vy;
    end

    var int timer = 2;  // countdown

    par/or do
        do MoveObject with
            this.obj = &outer;
            this.vx  = vx;
            this.vy  = vy;
        end;
    with
        // countdown 3-2-1-0
        // (or kill)
        watching go_hit do
            var int dt = 500 + _rand() % 2000;
            loop i in 3 do
                await (dt) ms;
                timer = timer - 1;
            end
        end

        // collide with ROCK => MAX
        this.id = _OBJ_EXPLOSION;

        // explode 40w/s
        _Mix_PlayChannel(-1, _SND_EXPLOSION, 0);
        watching 200ms do
            var float d = this.rect.w;
            var float v = 40 * this.rect.w;
            every dt in SDL_DT do
                d = d + v*dt/1000;
                this.rect.w = (int)d;
                this.rect.h = (int)d;
            end
        end
    with
        every SDL_REDRAW do
            _filledCircleRGBA(_REN, this.rect.x,this.rect.y,this.rect.w/2,
                                    0xFF,0x00,0x00,0xFF);

            if timer >= 0 then
                var int w=0, h=0;
                _SDL_QueryTexture(_TEX_BOMB[timer], null, null, &&w, &&h);
                var SDL_Rect r = SDL_Rect(this.rect.x - w/2,
                                          this.rect.y - h/2,
                                          w,h);
                _SDL_RenderCopy(_REN, _TEX_BOMB[timer], null, (_SDL_Rect&&)&&r);
            end
        end
    end
end
