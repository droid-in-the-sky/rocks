#if 0
$ ceu --pre --pre-args="-I/data/ceu/ceu-sdl/arch/" --pre-input="src/main.ceu" --ceu --env --env-header=/data/ceu/ceu/arch/env-header.h --env-main=/data/ceu/ceu/arch/env-main.c --env-output=/tmp/x.c --cc --cc-args="-lSDL2 -lSDL2_image -lSDL2_mixer -lSDL2_ttf -lSDL2_gfx -lm -g" --cc-output=/tmp/x.exe
#endif

#include "sdl.ceu"
#include "sdl-colors.ceu"

#define WIN_W 1280
#define WIN_H  800

/* Initialize SDL, open window, execute until SDL_QUIT */

var& _SDL_Renderer_ptr ren;
watching SDL_go("Rocks!", WIN_W,WIN_H, _) => (ren)
do
    /* Load textures */
    #include "texs.ceu"
    var& SDL_Texture tex_bg, tex_ship_1, tex_ship_2, tex_rock_big, tex_tap;
    vector&[10] SDL_Texture tex_nums;
    spawn Texs() => (tex_bg, tex_ship_1, tex_ship_2, tex_rock_big, tex_tap, tex_nums);

    /* Load sounds */
    #include "snds.ceu"
    var& _Mix_Chunk_ptr snd_start, snd_explosion, snd_rock;
    spawn Snds() => (snd_start, snd_explosion, snd_rock);

    par do
        /* Redraw background image */
        every SDL_REDRAW do
            _SDL_RenderCopy(ren, tex_bg.ptr, null, null);
        end
    with
        /* Points */
        #include "points.ceu"
        var& IPoints points1, points2;
        var int x = WIN_W / 15;
        var int y = WIN_H - WIN_H/10;
        spawn Points(SDL_Point(x,      y)) => (points1);
        spawn Points(SDL_Point(WIN_W-x,y)) => (points2);

        loop do
            /* Starting screen */
            par/or do
                await 1s;
                await SDL_KEYDOWN;
            with
                var SDL_Rect r =
                    val SDL_Rect(WIN_W/2 - tex_tap.width/2,
                                 WIN_H/2 - tex_tap.height/2,
                                 tex_tap.width, tex_tap.height);
                loop do
                    await 500ms;
                    watching 500ms do
                        every SDL_REDRAW do
                            _SDL_RenderCopy(ren, tex_tap.ptr, null,
                                            (&&r as _SDL_Rect&&));
                        end
                    end
                end
            end
            _Mix_PlayChannel(-1, snd_start, 0);

            /* Game screen */
            do
                var bool one_inc = false;
                var bool two_inc = false;

                #include "game.ceu"
                await Game(&one_inc, &two_inc);

                if one_inc then
                    emit points1.inc;
                end
                if two_inc then
                    emit points2.inc;
                end
            end
        end
    end
end

escape 0;
