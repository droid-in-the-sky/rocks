data IPoints with
    event void inc;
    var   int  cur;
end

code/await Points (var SDL_Point pos) => (var& IPoints me) => FOREVER do
    var IPoints me_ = val IPoints(_,0);
    me = &me_;

    var int v0=0, v1=0, v2=0;

    var SDL_Texture tex = outer.tex_nums[0];
    var SDL_Rect rect = val SDL_Rect(pos.x,pos.y, tex.width,tex.height);

    par do
        every me_.inc do
            me_.cur = me_.cur + 1;
            me_.cur = me_.cur % 1000;
            v0 = me_.cur     % 10;
            v1 = me_.cur/10  % 10;
            v2 = me_.cur/100 % 10;
        end
    with
        every SDL_REDRAW do
            var SDL_Rect r = rect;
            _SDL_RenderCopy(&&outer.ren, &&outer.tex_nums[v0].tex,
                            null, (&&r as _SDL_Rect&&));
            if me_.cur >= 10 then
                r.x = r.x - r.w;
                _SDL_RenderCopy(&&outer.ren, &&outer.tex_nums[v1].tex,
                                null, (&&r as _SDL_Rect&&));
                if me_.cur >= 100 then
                    r.x = r.x - r.w;
                    _SDL_RenderCopy(&&outer.ren, &&outer.tex_nums[v2].tex,
                                    null, (&&r as _SDL_Rect&&));
                end
            end
        end
    end
end
